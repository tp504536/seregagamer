# import aiocron
from asyncio import sleep

from aiogram import Bot, Dispatcher, executor, types
import logging
from sql import Database
import keydoards
from keydoards import *
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

storage = MemoryStorage()
bot = Bot(token="5971412217:AAG1tpPOeGsWvBdtKlDtst9tTevjJ3or2gg")
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

db = Database('base')


class FSMscrin(StatesGroup):
    get_scrin = State()


class Money(StatesGroup):
    sum = State()
    card = State()


class Send(StatesGroup):
    get_send = State()
    get_out = State()


class Spam(StatesGroup):
    get_spam = State()



@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    if not db.users(message.from_user.id):
        db.add_user(message.from_user.id)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º, –∫–æ—Ç–æ—Ä—ã–π –ø–ª–∞—Ç–∏—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–µ–Ω—å–≥–∏ –∑–∞ –∏–≥—Ä—É'
                         ' –≤ –±–µ—Å–ø–ª—Ç–∞–Ω—ã–µ –∏–≥—Ä—ã –Ω–∞ —Ç–≤–æ–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ.', reply_markup=main)


@dp.message_handler(commands='admin')
async def cmd_admin(message: types.Message):
    if message.from_user.id != 1912165183:
        await message.answer('–°—É–¥–∞—Ä—å –∞ –Ω–µ –ø–æ—à–ª–∏ –±—ã –≤—ã –Ω–∞ —Ö—É–π!')
    else:
        await message.answer('–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!', reply_markup=admin)


@dp.message_handler(content_types='text')
async def game(message: types.Message, state: FSMContext):
    if message.text == '–ò–≥—Ä–∞—Ç—å':
        await message.answer('–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. \n\n' \
                             'üî•–°–∫–∞—á–∞—Ç—å –∏–≥—Ä—É –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–∑ APP STORE - GOOGLE PLAY: '
                             '<a href="https://iguverse.com/download/r/znazqe49">—Å—Å—ã–ª–∫–∞</a>\n\n' \
                             '–ó–∞–≤–µ—Å—Ç–∏ —Å–µ–±–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞–º–∞–≥–æ—á–∏, –∏ —Å–æ–±—Ä–∞—Ç—å 60-100 ‚ö°Ô∏è —ç–Ω–µ—Ä–≥–∏–∏.\n\n' \
                             '–ó–∞–¥–∞–Ω–∏—è –≤ –∏–≥—Ä–µ:\n' \
                             '1. –ü–æ–¥–µ–ª–∏—Ç—Å—è –ø–∏—Ç–æ–º—Ü–µ–º –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º-—Ç–∏–∫—Ç–æ–∫ +50 —ç–Ω–µ—Ä–≥–∏–∏.\n' \
                             '2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è +20 —ç–Ω–µ—Ä–≥–∏–∏.\n' \
                             '3. –ü–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞—Ç—å –∫–∞–∫—Ç—É—Å—ã, +15 —ç–Ω–µ—Ä–≥–∏–∏.\n' \
                             '4. –ü—Ä–æ–π—Ç–∏ 1–∫–º +15 —ç–Ω–µ—Ä–≥–∏–∏.\n\n ' \
                             '–¶–µ–ª—å –∑–∞–¥–∞–Ω–∏—è —Å–æ–±–∏—Ä–∞—Ç—å –æ—Ç 60 —ç–Ω–µ—Ä–≥–∏–∏ –≤ –¥–µ–Ω—å, –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –¥–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ 150—Ä ü§ë\n'
                             '–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ',
                             reply_markup=get_active, parse_mode='html')
    elif message.text == '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∑–∞ –∏–≥—Ä—É':
        await message.answer('–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –∏–≥—Ä—ã, –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–º –ø–ª–∞—Ç—è—Ç –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞,'
                             ' —á–∞—Å—Ç—å –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö, –º—ã –¥–∞–µ–º –≤–∞–º –≤ –≤–∏–¥–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –¥–µ–π—Å—Ç–≤–∏—èüî•\n\n'
                             '–ó–∞ –æ–¥–Ω—É –∏–≥—Ä—É –º—ã –Ω–∞—á–∏—Å–ª—è–µ–º 150—Ä ( 2.5$ )ü§ë –≤ —Å—É—Ç–∫–∏,'
                             '–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏!\n\n'
                             '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã –∏–≥—Ä–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–∏–≥—Ä–∞—Ç—å¬ª —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—É—é –≤ –º–µ–Ω—é –±–æ—Ç–∞, '
                             '–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ä—É—á–Ω—É—é, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π.\n\n'
                             ' –í—ã–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ QIWI, –∏ –∫–∞—Ä—Ç—ã —Ä—Ñ-—É–∫—Ä.')

    elif message.text == '–ö–æ—à–µ–ª–µ–∫':
        money = db.balance(message.chat.id)
        await message.answer(
            '–í–∞—à –±–∞–ª–∞–Ω—Å ' + str(money).replace('[', '').replace(']', '').replace('(', '').replace(')', '')
            .replace('\'', '').replace(',', '') + "\n\n –í—ã–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç—É –±–∞–Ω–∫–∞ –∏–ª–∏ Qiwi",
            reply_markup=out_money)

    elif message.text == '–í—ã–≤–æ–¥':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
        await state.set_state(Money.sum)

    elif message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main)

    elif message.text == 'Users-menu':
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é', reply_markup=main)
    elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üóíÔ∏è':
        len_users = db.lenuser()
        await message.answer('–í –±–æ—Ç–∞ –∑–∞—Ö–æ–¥–∏–ª–æ ' + str(len_users))
    elif message.text == '–†–∞—Å—Å—ã–ª–∫–∞üì§':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å–∫')
        await state.set_state(Spam.get_spam)


@dp.callback_query_handler(text='check')
async def no_date(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω —Å–æ–±—Ä–∞–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await state.set_state(FSMscrin.get_scrin)


@dp.message_handler(content_types='photo', state=FSMscrin.get_scrin.state)
async def scrinshot(message: types.Message, state: FSMContext):
    global photo
    async with state.proxy() as photo:
        photo['photo'] = message.photo[0].file_id
        await state.finish()
        await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω", reply_markup=scrin)


@dp.message_handler(content_types='text', state=Money.sum.state)
async def sum(message: types.Message, state: FSMContext):
    async with state.proxy() as text:
        text['text'] = message.text
        await state.finish()
        if text['text'].isdigit():
            await message.answer(
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –Ω–æ–º–µ—Ä Qiwi\n\n –ü—Ä–∏–º–µ—Ä:\nCard 1111 1111 1111 1111 \nQiwi 79045530327')
            await state.set_state(Money.card)
        else:
            await message.answer('–ü–æ—Ö–æ–¥—É –≤—ã –æ—à–∏–±–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',reply_markup=main)

@dp.message_handler(content_types='text', state=Money.card.state)
async def card(message: types.Message, state: FSMContext):
    async with state.proxy() as text:
        text['text'] = message.text
        await state.finish()
        if text['text'].isdigit():
            check = db.balance(message.from_user.id)
            print(check)
            check = str(check).replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('\'',
                                        '').replace(',', '')
            if int(check) < 500:
                await message.answer("–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            else:
                await message.answer('–í–∞—à –≤—ã–≤–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ')
        else:
            await message.answer('–ü–æ—Ö–æ–¥—É –≤—ã –æ—à–∏–±–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',reply_markup=main)


@dp.callback_query_handler(text='send')
async def get_send(call: types.CallbackQuery):
    global uid
    uid = call.from_user.id
    await call.bot.send_photo(chat_id='1912165183', photo=photo['photo'], caption=str(uid), reply_markup=admin_update)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)


@dp.callback_query_handler(text='out')
async def get_out(call: types.CallbackQuery):
    await call.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É ')
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)


@dp.callback_query_handler(text='ok')
async def ok(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Send.get_send)
    await call.message.answer("–í–≤–µ–¥–∏ id")


@dp.message_handler(content_types='text', state=Send.get_send.state)
async def get_senc(message: types.Message, state: FSMContext):
    async with state.proxy() as text:
        text['text'] = message.text
        await state.finish()
        await message.answer('–í—ã –Ω–∞—á–∏—Å–ª–∏–ª–∏ –±–∞–ª–∞–Ω—Å')
        db.balance_update(text['text'])
        await bot.send_message(text['text'], '–ù–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –ø–æ—É—Å—Ç—É–ø–∏–ª–∏ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞')


@dp.callback_query_handler(text='no')
async def no(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(Send.get_out)
    await call.message.answer("–í–≤–µ–¥–∏ id")


@dp.message_handler(content_types='text', state=Send.get_out.state)
async def get_senc(message: types.Message, state: FSMContext):
    async with state.proxy() as text:
        text['text'] = message.text
        await state.finish()
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏')
        await bot.send_message(text['text'], '–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ')

@dp.message_handler(content_types='text', state=Spam.get_spam.state)
async def spam(message: types.Message, state: FSMContext):
    global spam
    async with state.proxy() as spam:
        spam['text'] = message.text
        await state.finish()
        await message.answer(
            '–í–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å–∫—ã–ª–∫–∏: ' + spam['text'],reply_markup=admin_spam)


@dp.callback_query_handler(text='spam_all')
async def no_date(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer('–û—Ç–ª–∏—á–Ω–æ,–Ω–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É')
    all_users = db.all_user()
    for i in all_users:
        try:
            await bot.send_message(i[0], spam['text'])
            await sleep(0.33)
        except Exception:
            pass
    await call.message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')


@dp.callback_query_handler(text='cancel')
async def no(call: types.CallbackQuery):
    await call.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—Å–ª—ã–∫—É")
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
